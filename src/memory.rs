#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Memory([u8; 4096]);

impl Memory {
    pub fn new() -> Self {
        let mut mem = Memory([0; 4096]);
        mem.set_font();
        mem
    }

    pub fn get(&self, i: usize) -> u8 {
        self.0[i]
    }

    pub fn set(&mut self, i: usize, x: u8) {
        self.0[i] = x;
    }

    pub fn load_bytes_at(&mut self, i: usize, data: &[u8]) {
        self.0[i..i + data.len()].clone_from_slice(data);
    }

    fn set_font(&mut self) {
        // apparently its common to put the font data here
        self.load_bytes_at(0x50, &FONT_DATA)
    }
}

const FONT_DATA: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];
